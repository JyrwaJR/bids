import React from 'react';
import {
  attendanceQueryKey,
  batchQueryKey,
  domainQueryKey
} from '@constants/query-keys';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@components/ui/tabs';
import { AddAttendance } from './add-attendance';
import { useQuery } from 'react-query';
import { AxiosError } from 'axios';
import { ScrollArea } from '@components/ui/scroll-area';
import { Heading } from '@components/ui/heading';
import { useCQuery } from '@hooks/useCQuery';
import { DataTable } from '@components/ui/data-table';
import { CForm, FormFieldType } from '@components/form';
import { Form } from '@components/ui/form';
import { SubmitHandler, useForm, useWatch } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { format } from 'date-fns';
import { z } from 'zod';
import { AttendanceModelType } from '@models/attendance-model';
import { axiosInstance } from '@lib/utils';
const getAttendanceByBatchId = async (batchId: string, date?: string) => {
  try {
    if (!batchId) {
      return;
    }
    const res = await axiosInstance.get(`/attendance/${batchId}/${date}`);
    return res.data;
  } catch (error) {
    throw error;
  }
};

const schema = z.object({
  batch_id: z.string().uuid(),
  domain_id: z.string().uuid().optional(),
  date: z
    .string()
    .refine((v) => format(new Date(v), 'yyyy-MM-dd') !== 'invalid date')
    .optional()
});

const getStudentFields: FormFieldType[] = [
  { name: 'batch_id', label: 'Batch', select: true },
  { name: 'date', label: 'Date', type: 'date' }
];

export const AttendancePage = () => {
  const today = format(new Date(), 'yyyy-MM-dd');
  const form = useForm<AttendanceModelType>({
    resolver: zodResolver(schema),
    defaultValues: {
      date: today
    }
  });
  const watch_batch_id = useWatch({ control: form.control, name: 'batch_id' });
  const watch_date = useWatch({ control: form.control, name: 'date' });
  const domainQuery = useCQuery({ url: 'domain', queryKey: domainQueryKey });
  const batchQuery = useCQuery({ url: 'batch', queryKey: batchQueryKey });
  const attendanceQuery = useQuery({
    queryFn: async () =>
      await getAttendanceByBatchId(watch_batch_id, watch_date),
    queryKey: attendanceQueryKey,
    enabled: false,
    onError: (error: any) => {
      if (error instanceof AxiosError) {
        showToast(FailedToastTitle, error.response?.data.message);
      }
      showToast(FailedToastTitle, error.message);
    }
  });
  const prevBatchId = useRef<string | undefined>(undefined);
  const prevDate = useRef<string | undefined>(undefined);
  const onChangeDateOrBatch = useCallback(() => {
    if (
      watch_batch_id !== prevBatchId.current ||
      watch_date !== prevDate.current
    ) {
      attendanceQuery.refetch();
      prevBatchId.current = watch_batch_id;
      prevDate.current = watch_date;
    }
  }, [watch_batch_id, watch_date, attendanceQuery]);

  useEffect(() => {
    onChangeDateOrBatch();
  }, [onChangeDateOrBatch]);

  const domainOptions: OptionsT[] = useMemo(
    () =>
      domainQuery.isFetched && domainQuery.data
        ? domainQuery.data.data.map((item: { id: string; name: string }) => ({
            label: item.name,
            value: item.id
          }))
        : [],
    [domainQuery]
  );

  const batchOptions: OptionsT[] = useMemo(
    () =>
      batchQuery.isFetched && batchQuery.data
        ? batchQuery.data.data.map(
            (item: { id: string; batch_code: string }) => ({
              label: item.batch_code,
              value: item.id
            })
          )
        : [],
    [batchQuery]
  );

  const updatedFields: FormFieldType[] = useMemo(
    () =>
      getStudentFields.map((field) => {
        if (field.select) {
          switch (field.name) {
            case 'domain_id':
              return { ...field, options: domainOptions };
            case 'batch_id':
              return { ...field, options: batchOptions };
            default:
              return field;
          }
        }
        return field;
      }),
    [domainOptions, batchOptions]
  );
  return (
    <ScrollArea>
      <div className="flex-1 space-y-4">
        <Tabs defaultValue="attendance" className="space-y-4">
          <TabsList>
            <TabsTrigger value="attendance">Attendance</TabsTrigger>
            <TabsTrigger value="new-attendance">New Attendance</TabsTrigger>
          </TabsList>
          <TabsContent value="attendance" className="space-y-4">
            <div className="flex items-start justify-between space-y-2">
              <Heading title="New Attendance" description="Manage Attendance" />
            </div>
            <Form {...form}>
              <form
                onSubmit={form.handleSubmit(onSubmit)}
                className="flex flex-col items-start justify-center space-x-2 md:flex-row md:items-center md:justify-start"
              >
                <div>
                  <CForm
                    form={form}
                    fields={updatedFields}
                    loading={false}
                    className="md:col-span-6"
                  />
                </div>
                <Button
                  type="submit"
                  disabled={attendanceQuery.isFetching}
                  className="mt-4"
                >
                  Search
                </Button>
              </form>
            </Form>
            <Separator />
            <DataTable
              searchKey="batch"
              onClick={() => {
                if (isAbsentStudents.length > 0) {
                  setOpen(true);
                }
              }}
              columns={columns}
              disabled={isAbsentStudents.length > 0 ? false : true}
              className="h-full"
              isLoading={false}
              // TODO: correct data add
              data={attendanceQuery.data ?? []} // Use appropriate data source
            />
          </TabsContent>
          <TabsContent value="new-attendance" className="space-y-4">
            <AddAttendance />
          </TabsContent>
        </Tabs>
      </div>
    </ScrollArea>
  );
};
